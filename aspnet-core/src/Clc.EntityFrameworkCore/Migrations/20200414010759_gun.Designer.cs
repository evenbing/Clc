// <auto-generated />
using System;
using Clc.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Clc.Migrations
{
    [DbContext(typeof(ClcDbContext))]
    [Migration("20200414010759_gun")]
    partial class gun
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Clc.Affairs.Affair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CarryoutDate");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("CreateWorkerId");

                    b.Property<int>("DepotId");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Remark")
                        .HasMaxLength(50);

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<int>("TenantId");

                    b.Property<int>("WorkplaceId");

                    b.HasKey("Id");

                    b.HasIndex("CreateWorkerId");

                    b.HasIndex("DepotId");

                    b.HasIndex("WorkplaceId");

                    b.HasIndex("TenantId", "CarryoutDate", "DepotId");

                    b.ToTable("Affairs");
                });

            modelBuilder.Entity("Clc.Affairs.AffairEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffairId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<DateTime>("EventTime");

                    b.Property<string>("Issurer")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(10);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AffairId");

                    b.ToTable("AffairEvents");
                });

            modelBuilder.Entity("Clc.Affairs.AffairTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffairId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("CreateWorkerId");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<DateTime?>("EndTimeActual");

                    b.Property<string>("Remark")
                        .HasMaxLength(50);

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<DateTime?>("StartTimeActual");

                    b.Property<int>("TenantId");

                    b.Property<int>("WorkplaceId");

                    b.HasKey("Id");

                    b.HasIndex("AffairId");

                    b.HasIndex("CreateWorkerId");

                    b.HasIndex("WorkplaceId");

                    b.ToTable("AffairTasks");
                });

            modelBuilder.Entity("Clc.Affairs.AffairWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffairId");

                    b.Property<DateTime?>("CheckinTime");

                    b.Property<DateTime?>("CheckoutTime");

                    b.Property<DateTime?>("LastAskDoor");

                    b.Property<bool>("OnDuty");

                    b.Property<int>("TenantId");

                    b.Property<int>("WorkRoleId");

                    b.Property<int>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("AffairId");

                    b.HasIndex("WorkRoleId");

                    b.HasIndex("WorkerId");

                    b.ToTable("AffairWorkers");
                });

            modelBuilder.Entity("Clc.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<bool>("IsWorkerRole");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("Clc.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("WorkerId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("Clc.Clients.Box", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BoxRecordId");

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("OutletId");

                    b.Property<string>("Ramark")
                        .HasMaxLength(50);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("BoxRecordId");

                    b.HasIndex("OutletId");

                    b.HasIndex("TenantId", "Cn")
                        .IsUnique();

                    b.ToTable("Boxes");
                });

            modelBuilder.Entity("Clc.Clients.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("Contact")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Cn")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Clc.Clients.CustomerTaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<int?>("DepotId");

                    b.Property<float>("Price");

                    b.Property<string>("Remark")
                        .HasMaxLength(50);

                    b.Property<int>("TaskTypeId");

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("CustomerId", "TaskTypeId", "DepotId")
                        .IsUnique()
                        .HasFilter("[DepotId] IS NOT NULL");

                    b.ToTable("CustomerTaskTypes");
                });

            modelBuilder.Entity("Clc.Clients.Outlet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ciphertext")
                        .HasMaxLength(6);

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<string>("Contact")
                        .HasMaxLength(50);

                    b.Property<int>("CustomerId");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasMaxLength(6);

                    b.Property<int>("TenantId");

                    b.Property<string>("Weixins")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TenantId", "Cn")
                        .IsUnique();

                    b.ToTable("Outlets");
                });

            modelBuilder.Entity("Clc.Clients.OutletTaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepotId");

                    b.Property<int>("OutletId");

                    b.Property<float>("Price");

                    b.Property<string>("Remark")
                        .HasMaxLength(50);

                    b.Property<int>("TaskTypeId");

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("OutletId", "TaskTypeId", "DepotId")
                        .IsUnique()
                        .HasFilter("[DepotId] IS NOT NULL");

                    b.ToTable("OutletTaskTypes");
                });

            modelBuilder.Entity("Clc.Fields.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleRecordId");

                    b.Property<int>("ArticleTypeId");

                    b.Property<string>("BindInfo")
                        .HasMaxLength(20);

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("DepotId");

                    b.Property<string>("GunIp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Rfid")
                        .HasMaxLength(20);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleRecordId");

                    b.HasIndex("ArticleTypeId");

                    b.HasIndex("DepotId");

                    b.HasIndex("TenantId", "Cn")
                        .IsUnique();

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Clc.Fields.ArticleTypeBind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleTypeId");

                    b.Property<string>("BindStyle")
                        .HasMaxLength(8);

                    b.Property<int>("DepotId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleTypeId");

                    b.HasIndex("DepotId");

                    b.HasIndex("TenantId", "ArticleTypeId")
                        .IsUnique();

                    b.ToTable("ArticleTypeBinds");
                });

            modelBuilder.Entity("Clc.Fields.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ChargePerson")
                        .HasMaxLength(50);

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("DepotId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(200);

                    b.Property<DateTime>("RetireDate");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UseDate");

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.HasIndex("TenantId", "Cn")
                        .IsUnique();

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Clc.Fields.Depot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActiveRouteNeedCheckin");

                    b.Property<string>("AgentCn")
                        .HasMaxLength(8);

                    b.Property<bool>("AllowCardWhenCheckin");

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<DateTime?>("LastReportDate");

                    b.Property<double?>("Latitude");

                    b.Property<bool>("LocalUnlockScreen");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int?>("Radius");

                    b.Property<string>("ReportTo")
                        .HasMaxLength(50);

                    b.Property<int>("TenantId");

                    b.Property<string>("UnlockScreenPassword")
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Cn")
                        .IsUnique();

                    b.ToTable("Depots");
                });

            modelBuilder.Entity("Clc.Fields.GasStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("DepotList");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Remark");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Cn")
                        .IsUnique();

                    b.ToTable("GasStations");
                });

            modelBuilder.Entity("Clc.Fields.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int>("DepotId");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<byte[]>("Photo");

                    b.Property<string>("Remark")
                        .HasMaxLength(50);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.HasIndex("TenantId", "Cn")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Clc.Fields.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditiveInfo")
                        .HasMaxLength(20);

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int>("DepotId");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(50);

                    b.Property<string>("Finger")
                        .HasMaxLength(1024);

                    b.Property<string>("Finger2")
                        .HasMaxLength(1024);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LoginRoleNames")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("Password")
                        .HasMaxLength(10);

                    b.Property<byte[]>("Photo");

                    b.Property<int>("PostId");

                    b.Property<string>("Rfid")
                        .HasMaxLength(18);

                    b.Property<int>("TenantId");

                    b.Property<string>("WorkRoleNames")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.HasIndex("PostId");

                    b.HasIndex("TenantId", "Cn")
                        .IsUnique();

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Clc.Fields.WorkerFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<string>("ArmLicenceCn")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("CertificateCn")
                        .HasMaxLength(50);

                    b.Property<string>("CeteficationRecord");

                    b.Property<string>("Contact")
                        .HasMaxLength(50);

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<DateTime>("EndValidity");

                    b.Property<string>("Ethnicity")
                        .HasMaxLength(8);

                    b.Property<string>("FileCn")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("Hiredate");

                    b.Property<string>("Insurance")
                        .HasMaxLength(50);

                    b.Property<string>("Introductory")
                        .HasMaxLength(50);

                    b.Property<string>("JobChangeRecord");

                    b.Property<string>("LicenseType")
                        .HasMaxLength(4);

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(4);

                    b.Property<string>("MobilityRecord");

                    b.Property<string>("Nativeplace")
                        .HasMaxLength(10);

                    b.Property<string>("PoliceStation")
                        .HasMaxLength(4);

                    b.Property<string>("PoliticalStatus")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("QuitFileCn")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("Quitdate");

                    b.Property<string>("Remark");

                    b.Property<string>("ResidenceAddress")
                        .HasMaxLength(50);

                    b.Property<string>("RewardPunishRecord");

                    b.Property<string>("School")
                        .HasMaxLength(50);

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<int>("Stature");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<int>("TenantId");

                    b.Property<string>("TrainingRecord");

                    b.Property<int>("Weight");

                    b.Property<string>("WorkLicenseCn")
                        .HasMaxLength(50);

                    b.Property<int>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.HasIndex("TenantId", "WorkerId")
                        .IsUnique();

                    b.ToTable("WorkerFiles");
                });

            modelBuilder.Entity("Clc.Fields.Workplace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleTypeList")
                        .HasMaxLength(50);

                    b.Property<int>("AskOpenDeadline");

                    b.Property<string>("AskOpenStyle")
                        .HasMaxLength(20);

                    b.Property<string>("CameraIp")
                        .HasMaxLength(20);

                    b.Property<int>("DepotId");

                    b.Property<string>("DoorIp")
                        .HasMaxLength(20);

                    b.Property<int>("DutyLead");

                    b.Property<string>("EmergPassword")
                        .HasMaxLength(8);

                    b.Property<int>("MaxDuration");

                    b.Property<int>("MinDuration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("ShareDepotList")
                        .HasMaxLength(50);

                    b.Property<int>("TenantId");

                    b.Property<string>("WorkRoles")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.HasIndex("TenantId", "DepotId", "Name")
                        .IsUnique();

                    b.ToTable("Workplaces");
                });

            modelBuilder.Entity("Clc.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("Clc.PreRoutes.PreRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepotId");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<float?>("Mileage");

                    b.Property<string>("Remark")
                        .HasMaxLength(50);

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("RouteTypeId");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<int>("TenantId");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.HasIndex("RouteTypeId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("TenantId", "DepotId", "RouteName")
                        .IsUnique();

                    b.ToTable("PreRoutes");
                });

            modelBuilder.Entity("Clc.PreRoutes.PreRouteTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArriveTime")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<int>("OutletId");

                    b.Property<int>("PreRouteId");

                    b.Property<string>("Remark")
                        .HasMaxLength(50);

                    b.Property<int>("TaskTypeId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OutletId");

                    b.HasIndex("PreRouteId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("PreRouteTasks");
                });

            modelBuilder.Entity("Clc.PreRoutes.PreRouteWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PreRouteId");

                    b.Property<int>("TenantId");

                    b.Property<int>("WorkRoleId");

                    b.Property<int>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("PreRouteId");

                    b.HasIndex("WorkRoleId");

                    b.HasIndex("WorkerId");

                    b.ToTable("PreRouteWorkers");
                });

            modelBuilder.Entity("Clc.PreRoutes.PreVehicleWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TenantId");

                    b.Property<int>("VehicleId");

                    b.Property<int>("WorkRoleId");

                    b.Property<int>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.HasIndex("WorkRoleId");

                    b.HasIndex("WorkerId");

                    b.ToTable("PreVehicleWorkers");
                });

            modelBuilder.Entity("Clc.Routes.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("ActualMileage");

                    b.Property<int?>("AltVehicleId");

                    b.Property<DateTime>("CarryoutDate");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("CreateWorkerId");

                    b.Property<int>("DepotId");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<float?>("Mileage");

                    b.Property<string>("Remark")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ReturnTime");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("RouteTypeId");

                    b.Property<DateTime>("SetoutTime");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<int>("TenantId");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("AltVehicleId");

                    b.HasIndex("CreateWorkerId");

                    b.HasIndex("DepotId");

                    b.HasIndex("RouteTypeId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("TenantId", "CarryoutDate", "DepotId", "RouteName")
                        .IsUnique();

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Clc.Routes.RouteArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleRecordId");

                    b.Property<int>("RouteId");

                    b.Property<int>("RouteWorkerId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleRecordId");

                    b.HasIndex("RouteId");

                    b.HasIndex("RouteWorkerId");

                    b.ToTable("RouteArticles");
                });

            modelBuilder.Entity("Clc.Routes.RouteEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<DateTime>("EventTime");

                    b.Property<string>("Issurer")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(10);

                    b.Property<int>("RouteId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteEvents");
                });

            modelBuilder.Entity("Clc.Routes.RouteInBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoxRecordId");

                    b.Property<int>("RouteId");

                    b.Property<int>("RouteTaskId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("BoxRecordId");

                    b.HasIndex("RouteId");

                    b.HasIndex("RouteTaskId");

                    b.ToTable("RouteInBoxes");
                });

            modelBuilder.Entity("Clc.Routes.RouteOutBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoxRecordId");

                    b.Property<int>("RouteId");

                    b.Property<int>("RouteTaskId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("BoxRecordId");

                    b.HasIndex("RouteId");

                    b.HasIndex("RouteTaskId");

                    b.ToTable("RouteOutBoxes");
                });

            modelBuilder.Entity("Clc.Routes.RouteTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArriveTime")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("CreateWorkerId");

                    b.Property<DateTime?>("IdentifyTime");

                    b.Property<int>("OutletId");

                    b.Property<string>("OutletIdentifyInfo")
                        .HasMaxLength(50);

                    b.Property<float?>("Price");

                    b.Property<string>("Rated");

                    b.Property<string>("Remark")
                        .HasMaxLength(50);

                    b.Property<int>("RouteId");

                    b.Property<int>("TaskTypeId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreateWorkerId");

                    b.HasIndex("OutletId");

                    b.HasIndex("RouteId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("RouteTasks");
                });

            modelBuilder.Entity("Clc.Routes.RouteWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AltWorkerId");

                    b.Property<int>("RouteId");

                    b.Property<int>("TenantId");

                    b.Property<int>("WorkRoleId");

                    b.Property<int>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("AltWorkerId");

                    b.HasIndex("RouteId");

                    b.HasIndex("WorkRoleId");

                    b.HasIndex("WorkerId");

                    b.ToTable("RouteWorkers");
                });

            modelBuilder.Entity("Clc.Runtime.ArticleRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId");

                    b.Property<DateTime>("LendTime");

                    b.Property<string>("LendWorkers")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime?>("ReturnTime");

                    b.Property<string>("ReturnWorkers")
                        .HasMaxLength(64);

                    b.Property<int>("RouteWorkerId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("RouteWorkerId");

                    b.HasIndex("TenantId", "LendTime");

                    b.ToTable("ArticleRecords");
                });

            modelBuilder.Entity("Clc.Runtime.AskDoorRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Approver");

                    b.Property<int>("AskAffairId");

                    b.Property<string>("AskReason");

                    b.Property<DateTime>("AskTime");

                    b.Property<string>("AskWorkers")
                        .HasMaxLength(200);

                    b.Property<int?>("MonitorAffairId");

                    b.Property<DateTime?>("ProcessTime");

                    b.Property<string>("Remark");

                    b.Property<int?>("RouteId");

                    b.Property<int>("TenantId");

                    b.Property<int>("WorkplaceId");

                    b.HasKey("Id");

                    b.HasIndex("AskAffairId");

                    b.HasIndex("MonitorAffairId");

                    b.HasIndex("RouteId");

                    b.HasIndex("WorkplaceId");

                    b.HasIndex("TenantId", "AskTime");

                    b.HasIndex("TenantId", "WorkplaceId", "AskTime");

                    b.ToTable("AskDoorRecords");
                });

            modelBuilder.Entity("Clc.Runtime.BoxRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoxId");

                    b.Property<DateTime?>("DeliverTime");

                    b.Property<int?>("InRouteTaskId");

                    b.Property<DateTime?>("InTime");

                    b.Property<string>("InWorkers")
                        .HasMaxLength(64);

                    b.Property<int?>("OutRouteTaskId");

                    b.Property<DateTime?>("OutTime");

                    b.Property<string>("OutWorkers")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("PickupTime");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("BoxId");

                    b.HasIndex("InRouteTaskId");

                    b.HasIndex("OutRouteTaskId");

                    b.HasIndex("TenantId", "InTime");

                    b.ToTable("BoxRecords");
                });

            modelBuilder.Entity("Clc.Runtime.EmergDoorRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalTime");

                    b.Property<int>("ApproverId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("EmergDoorPassword");

                    b.Property<int>("IssueId");

                    b.Property<int?>("MonitorAffairId");

                    b.Property<DateTime?>("ProcessTime");

                    b.Property<string>("Remark");

                    b.Property<int>("TenantId");

                    b.Property<int>("WorkplaceId");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("IssueId");

                    b.HasIndex("MonitorAffairId");

                    b.HasIndex("WorkplaceId");

                    b.HasIndex("TenantId", "CreateTime");

                    b.HasIndex("TenantId", "WorkplaceId", "CreateTime");

                    b.ToTable("EmergDoorRecords");
                });

            modelBuilder.Entity("Clc.Runtime.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("CreateWorkerId");

                    b.Property<int>("DepotId");

                    b.Property<string>("ProcessContent")
                        .HasMaxLength(512);

                    b.Property<string>("ProcessStyle");

                    b.Property<DateTime?>("ProcessTime");

                    b.Property<int?>("ProcessWorkerId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreateWorkerId");

                    b.HasIndex("DepotId");

                    b.HasIndex("ProcessWorkerId");

                    b.HasIndex("TenantId", "DepotId", "CreateTime");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("Clc.Runtime.OilRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ConfirmTime");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("CreateWorkerId");

                    b.Property<int>("GasStationId");

                    b.Property<double>("Mileage");

                    b.Property<int>("OilTypeId");

                    b.Property<double>("Price");

                    b.Property<int?>("ProcessWorkerId");

                    b.Property<double>("Quantity");

                    b.Property<string>("Remark")
                        .HasMaxLength(512);

                    b.Property<int>("TenantId");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("CreateWorkerId");

                    b.HasIndex("GasStationId");

                    b.HasIndex("OilTypeId");

                    b.HasIndex("ProcessWorkerId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("TenantId", "VehicleId");

                    b.HasIndex("TenantId", "CreateTime", "VehicleId");

                    b.ToTable("OilRecords");
                });

            modelBuilder.Entity("Clc.Runtime.Signin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CarryoutDate");

                    b.Property<int>("DepotId");

                    b.Property<string>("SigninStyle");

                    b.Property<DateTime>("SigninTime");

                    b.Property<int>("TenantId");

                    b.Property<int>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.HasIndex("WorkerId");

                    b.HasIndex("TenantId", "CarryoutDate", "DepotId", "WorkerId");

                    b.ToTable("Signins");
                });

            modelBuilder.Entity("Clc.Runtime.VehicleMTRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ConfirmTime");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("CreateWorkerId");

                    b.Property<DateTime>("MTDate");

                    b.Property<double>("Price");

                    b.Property<int?>("ProcessWorkerId");

                    b.Property<string>("Remark")
                        .HasMaxLength(512);

                    b.Property<int>("TenantId");

                    b.Property<int>("VehicleId");

                    b.Property<int>("VehicleMTTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CreateWorkerId");

                    b.HasIndex("ProcessWorkerId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleMTTypeId");

                    b.HasIndex("TenantId", "VehicleId");

                    b.HasIndex("TenantId", "CreateTime", "VehicleId");

                    b.ToTable("VehicleMTMTRecords");
                });

            modelBuilder.Entity("Clc.Runtime.VehicleRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<double>("CurrentMileage");

                    b.Property<double>("Quantity");

                    b.Property<string>("Remark")
                        .HasMaxLength(64);

                    b.Property<int>("TenantId");

                    b.Property<int>("VehicleId");

                    b.Property<int>("WorkerId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.HasIndex("WorkerId");

                    b.HasIndex("TenantId", "VehicleId");

                    b.HasIndex("TenantId", "CreateTime", "VehicleId");

                    b.ToTable("VehicleRecords");
                });

            modelBuilder.Entity("Clc.Types.ArticleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BindStyle")
                        .HasMaxLength(8);

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("ArticleTypes");
                });

            modelBuilder.Entity("Clc.Types.OilType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("OilTypes");
                });

            modelBuilder.Entity("Clc.Types.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppName")
                        .HasMaxLength(8);

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("DefaultWorkRoleName")
                        .HasMaxLength(8);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Clc.Types.RouteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivateLead");

                    b.Property<int>("LendArticleDeadline");

                    b.Property<int>("LendArticleLead");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int>("TenantId");

                    b.Property<string>("WorkRoles")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("RouteTypes");
                });

            modelBuilder.Entity("Clc.Types.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BasicPrice");

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int>("TenantId");

                    b.Property<bool>("isTemporary");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("Clc.Types.VehicleMTType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("VehicleMTTypes");
                });

            modelBuilder.Entity("Clc.Types.WorkRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleTypeList")
                        .HasMaxLength(50);

                    b.Property<string>("Cn")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Duties")
                        .HasMaxLength(50);

                    b.Property<int>("MaxNum");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int>("TenantId");

                    b.Property<bool>("mustHave");

                    b.HasKey("Id");

                    b.ToTable("WorkRoles");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("Clc.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("Clc.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("Clc.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("Clc.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("Clc.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("Clc.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Clc.Affairs.Affair", b =>
                {
                    b.HasOne("Clc.Fields.Worker", "CreateWorker")
                        .WithMany()
                        .HasForeignKey("CreateWorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Fields.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Workplace", "Workplace")
                        .WithMany()
                        .HasForeignKey("WorkplaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Affairs.AffairEvent", b =>
                {
                    b.HasOne("Clc.Affairs.Affair", "Affair")
                        .WithMany()
                        .HasForeignKey("AffairId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Affairs.AffairTask", b =>
                {
                    b.HasOne("Clc.Affairs.Affair")
                        .WithMany("Tasks")
                        .HasForeignKey("AffairId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Worker", "CreateWorker")
                        .WithMany()
                        .HasForeignKey("CreateWorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Fields.Workplace", "Workplace")
                        .WithMany()
                        .HasForeignKey("WorkplaceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Clc.Affairs.AffairWorker", b =>
                {
                    b.HasOne("Clc.Affairs.Affair", "Affair")
                        .WithMany("Workers")
                        .HasForeignKey("AffairId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Types.WorkRole", "WorkRole")
                        .WithMany()
                        .HasForeignKey("WorkRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Clc.Authorization.Roles.Role", b =>
                {
                    b.HasOne("Clc.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Clc.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Clc.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Clc.Authorization.Users.User", b =>
                {
                    b.HasOne("Clc.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Clc.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Clc.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Clc.Fields.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("Clc.Clients.Box", b =>
                {
                    b.HasOne("Clc.Runtime.BoxRecord", "BoxRecord")
                        .WithMany()
                        .HasForeignKey("BoxRecordId");

                    b.HasOne("Clc.Clients.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Clc.Clients.CustomerTaskType", b =>
                {
                    b.HasOne("Clc.Clients.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId");

                    b.HasOne("Clc.Types.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Clients.Outlet", b =>
                {
                    b.HasOne("Clc.Clients.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Clc.Clients.OutletTaskType", b =>
                {
                    b.HasOne("Clc.Fields.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId");

                    b.HasOne("Clc.Clients.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Types.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Fields.Article", b =>
                {
                    b.HasOne("Clc.Runtime.ArticleRecord", "ArticleRecord")
                        .WithMany()
                        .HasForeignKey("ArticleRecordId");

                    b.HasOne("Clc.Types.ArticleType", "ArticleType")
                        .WithMany()
                        .HasForeignKey("ArticleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Fields.ArticleTypeBind", b =>
                {
                    b.HasOne("Clc.Types.ArticleType", "ArticleType")
                        .WithMany()
                        .HasForeignKey("ArticleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Fields.Asset", b =>
                {
                    b.HasOne("Clc.Fields.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Fields.Vehicle", b =>
                {
                    b.HasOne("Clc.Fields.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Fields.Worker", b =>
                {
                    b.HasOne("Clc.Fields.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Types.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Fields.WorkerFile", b =>
                {
                    b.HasOne("Clc.Fields.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Fields.Workplace", b =>
                {
                    b.HasOne("Clc.Fields.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Clc.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("Clc.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Clc.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("Clc.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Clc.PreRoutes.PreRoute", b =>
                {
                    b.HasOne("Clc.Fields.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Types.RouteType", "RouteType")
                        .WithMany()
                        .HasForeignKey("RouteTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Clc.PreRoutes.PreRouteTask", b =>
                {
                    b.HasOne("Clc.Clients.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.PreRoutes.PreRoute", "PreRoute")
                        .WithMany()
                        .HasForeignKey("PreRouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Types.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.PreRoutes.PreRouteWorker", b =>
                {
                    b.HasOne("Clc.PreRoutes.PreRoute", "PreRoute")
                        .WithMany()
                        .HasForeignKey("PreRouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Types.WorkRole", "WorkRole")
                        .WithMany()
                        .HasForeignKey("WorkRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Clc.PreRoutes.PreVehicleWorker", b =>
                {
                    b.HasOne("Clc.Fields.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Types.WorkRole", "WorkRole")
                        .WithMany()
                        .HasForeignKey("WorkRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Clc.Routes.Route", b =>
                {
                    b.HasOne("Clc.Fields.Vehicle", "AltVehicle")
                        .WithMany()
                        .HasForeignKey("AltVehicleId");

                    b.HasOne("Clc.Fields.Worker", "CreateWorker")
                        .WithMany()
                        .HasForeignKey("CreateWorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Fields.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Types.RouteType", "RouteType")
                        .WithMany()
                        .HasForeignKey("RouteTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Clc.Routes.RouteArticle", b =>
                {
                    b.HasOne("Clc.Runtime.ArticleRecord", "ArticleRecord")
                        .WithMany()
                        .HasForeignKey("ArticleRecordId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Routes.Route")
                        .WithMany("Articles")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Routes.RouteWorker")
                        .WithMany("Articles")
                        .HasForeignKey("RouteWorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Routes.RouteEvent", b =>
                {
                    b.HasOne("Clc.Routes.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Routes.RouteInBox", b =>
                {
                    b.HasOne("Clc.Runtime.BoxRecord", "BoxRecord")
                        .WithMany()
                        .HasForeignKey("BoxRecordId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Routes.Route")
                        .WithMany("InBoxes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Routes.RouteTask")
                        .WithMany("InBoxes")
                        .HasForeignKey("RouteTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Routes.RouteOutBox", b =>
                {
                    b.HasOne("Clc.Runtime.BoxRecord", "BoxRecord")
                        .WithMany()
                        .HasForeignKey("BoxRecordId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Routes.Route")
                        .WithMany("OutBoxes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Routes.RouteTask")
                        .WithMany("OutBoxes")
                        .HasForeignKey("RouteTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Routes.RouteTask", b =>
                {
                    b.HasOne("Clc.Fields.Worker", "CreateWorker")
                        .WithMany()
                        .HasForeignKey("CreateWorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Clients.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Routes.Route", "Route")
                        .WithMany("Tasks")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Types.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Routes.RouteWorker", b =>
                {
                    b.HasOne("Clc.Fields.Worker", "AltWorker")
                        .WithMany()
                        .HasForeignKey("AltWorkerId");

                    b.HasOne("Clc.Routes.Route", "Route")
                        .WithMany("Workers")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Types.WorkRole", "WorkRole")
                        .WithMany()
                        .HasForeignKey("WorkRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Clc.Runtime.ArticleRecord", b =>
                {
                    b.HasOne("Clc.Fields.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Routes.RouteWorker", "RouteWorker")
                        .WithMany()
                        .HasForeignKey("RouteWorkerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Clc.Runtime.AskDoorRecord", b =>
                {
                    b.HasOne("Clc.Affairs.Affair", "AskAffair")
                        .WithMany()
                        .HasForeignKey("AskAffairId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Affairs.Affair", "MonitorAffair")
                        .WithMany()
                        .HasForeignKey("MonitorAffairId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Routes.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId");

                    b.HasOne("Clc.Fields.Workplace", "Workplace")
                        .WithMany()
                        .HasForeignKey("WorkplaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Runtime.BoxRecord", b =>
                {
                    b.HasOne("Clc.Clients.Box", "Box")
                        .WithMany()
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Routes.RouteTask", "InRouteTask")
                        .WithMany()
                        .HasForeignKey("InRouteTaskId");

                    b.HasOne("Clc.Routes.RouteTask", "OutRouteTask")
                        .WithMany()
                        .HasForeignKey("OutRouteTaskId");
                });

            modelBuilder.Entity("Clc.Runtime.EmergDoorRecord", b =>
                {
                    b.HasOne("Clc.Fields.Worker", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Runtime.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Affairs.Affair", "MonitorAffair")
                        .WithMany()
                        .HasForeignKey("MonitorAffairId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Fields.Workplace", "Workplace")
                        .WithMany()
                        .HasForeignKey("WorkplaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Runtime.Issue", b =>
                {
                    b.HasOne("Clc.Fields.Worker", "CreateWorker")
                        .WithMany()
                        .HasForeignKey("CreateWorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Fields.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Worker", "ProcessWorker")
                        .WithMany()
                        .HasForeignKey("ProcessWorkerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Clc.Runtime.OilRecord", b =>
                {
                    b.HasOne("Clc.Fields.Worker", "CreateWorker")
                        .WithMany()
                        .HasForeignKey("CreateWorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Fields.GasStation", "GasStation")
                        .WithMany()
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Types.OilType", "OilType")
                        .WithMany()
                        .HasForeignKey("OilTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Worker", "ProcessWorker")
                        .WithMany()
                        .HasForeignKey("ProcessWorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Fields.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Runtime.Signin", b =>
                {
                    b.HasOne("Clc.Fields.Depot", "Depot")
                        .WithMany()
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Clc.Runtime.VehicleMTRecord", b =>
                {
                    b.HasOne("Clc.Fields.Worker", "CreateWorker")
                        .WithMany()
                        .HasForeignKey("CreateWorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Fields.Worker", "ProcessWorker")
                        .WithMany()
                        .HasForeignKey("ProcessWorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clc.Fields.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Types.VehicleMTType", "VehicleMTType")
                        .WithMany()
                        .HasForeignKey("VehicleMTTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clc.Runtime.VehicleRecord", b =>
                {
                    b.HasOne("Clc.Fields.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clc.Fields.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("Clc.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("Clc.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
